<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Grocery Tracker | متتبع البقالة بالذكاء الاصطناعي</title>
    <link href="https://fonts.googleapis.com/css2?family=Tajawal:wght@400;500;700;900&family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            /* Color System */
            --primary: #6C63FF;
            --primary-light: #8A85FF;
            --primary-dark: #564FD1;
            --secondary: #FF6584;
            --secondary-light: #FF8FA3;
            --secondary-dark: #E04D6D;
            --success: #48BB78;
            --success-light: #68D391;
            --warning: #ED8936;
            --danger: #F56565;
            --info: #4299E1;
            
            /* Light Theme */
            --light-bg: #f8f9fa;
            --light-card: #ffffff;
            --light-text: #2d3748;
            --light-text-secondary: #4a5568;
            --light-border: #e2e8f0;
            --light-hover: #edf2f7;
            
            /* Dark Theme */
            --dark-bg: #1a202c;
            --dark-card: #2d3748;
            --dark-card-light: #3c4658;
            --dark-text: #f7fafc;
            --dark-text-secondary: #cbd5e0;
            --dark-border: #4a5568;
            --dark-hover: #4a5568;
            
            /* Spacing */
            --space-xs: 4px;
            --space-sm: 8px;
            --space-md: 16px;
            --space-lg: 24px;
            --space-xl: 32px;
            --space-2xl: 48px;
            
            /* Typography */
            --text-xs: 0.75rem;
            --text-sm: 0.875rem;
            --text-base: 1rem;
            --text-lg: 1.125rem;
            --text-xl: 1.25rem;
            --text-2xl: 1.5rem;
            --text-3xl: 1.875rem;
            --text-4xl: 2.25rem;
            
            /* Shadows */
            --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
            --shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
            --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
            --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
            --shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
            --shadow-primary: 0 4px 15px rgba(108, 99, 255, 0.3);
            --shadow-secondary: 0 4px 15px rgba(255, 101, 132, 0.3);
            
            /* Border Radius */
            --radius-sm: 4px;
            --radius-md: 8px;
            --radius-lg: 12px;
            --radius-xl: 16px;
            --radius-full: 9999px;
            
            /* Current Theme Variables */
            --bg-color: var(--light-bg);
            --card-color: var(--light-card);
            --text-color: var(--light-text);
            --text-secondary: var(--light-text-secondary);
            --border-color: var(--light-border);
            --hover-color: var(--light-hover);
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }
        
        body {
            font-family: 'Tajawal', 'Poppins', sans-serif;
            background-color: var(--bg-color);
            color: var(--text-color);
            transition: all 0.3s ease;
            min-height: 100vh;
            line-height: 1.5;
        }
        
        h1, h2, h3, h4 {
            font-weight: 700;
            margin-bottom: var(--space-md);
        }
        
        h1 { font-size: var(--text-3xl); }
        h2 { font-size: var(--text-2xl); }
        h3 { font-size: var(--text-xl); }
        h4 { font-size: var(--text-lg); }
        
        small {
            font-size: var(--text-xs);
            color: var(--text-secondary);
        }
        
        .app-container {
            display: flex;
            min-height: 100vh;
        }
        
        .sidebar {
            width: 320px;
            background-color: var(--card-color);
            border-left: 1px solid var(--border-color);
            padding: var(--space-lg);
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            gap: var(--space-xl);
        }
        
        .main-content {
            flex: 1;
            padding: var(--space-xl);
            max-width: 800px;
            margin: 0 auto;
            width: 100%;
        }
        
        .app-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: var(--space-xl);
            gap: var(--space-md);
        }
        
        .header-actions {
            display: flex;
            gap: var(--space-sm);
        }
        
        .btn {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: var(--space-xs);
            padding: var(--space-sm) var(--space-md);
            border-radius: var(--radius-md);
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
            border: none;
            font-family: inherit;
        }
        
        .btn-primary {
            background-color: var(--primary);
            color: white;
        }
        
        .btn-primary:hover {
            background-color: var(--primary-dark);
            transform: translateY(-1px);
            box-shadow: var(--shadow-primary);
        }
        
        .btn-secondary {
            background-color: var(--secondary);
            color: white;
        }
        
        .btn-secondary:hover {
            background-color: var(--secondary-dark);
            transform: translateY(-1px);
            box-shadow: var(--shadow-secondary);
        }
        
        .btn-outline {
            background: transparent;
            border: 1px solid var(--border-color);
            color: var(--text-color);
        }
        
        .btn-outline:hover {
            background-color: var(--hover-color);
        }
        
        .btn-danger {
            background-color: var(--danger);
            color: white;
        }
        
        .btn-danger:hover {
            background-color: #e53e3e;
        }
        
        .btn-sm {
            padding: var(--space-xs) var(--space-sm);
            font-size: var(--text-sm);
        }
        
        .btn-icon {
            width: 32px;
            height: 32px;
            padding: 0;
            border-radius: var(--radius-full);
        }
        
        .voice-section {
            text-align: center;
            margin-bottom: var(--space-xl);
        }
        
        .voice-btn {
            background: var(--primary);
            color: white;
            border: none;
            padding: var(--space-md) var(--space-xl);
            border-radius: var(--radius-full);
            font-size: var(--text-lg);
            cursor: pointer;
            display: inline-flex;
            align-items: center;
            gap: var(--space-sm);
            box-shadow: var(--shadow-primary);
            transition: all 0.3s;
            font-weight: 600;
        }
        
        .voice-btn:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-lg);
        }
        
        .voice-btn.listening {
            background: var(--secondary);
            animation: pulse 1.5s infinite;
        }
        
        .voice-status {
            margin-top: var(--space-sm);
            font-size: var(--text-sm);
            color: var(--text-secondary);
        }
        
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }
        
        .input-section {
            margin-bottom: var(--space-xl);
        }
        
        .input-group {
            display: flex;
            gap: var(--space-sm);
        }
        
        input[type="text"] {
            flex: 1;
            padding: var(--space-sm) var(--space-md);
            border: 1px solid var(--border-color);
            border-radius: var(--radius-md);
            background-color: var(--card-color);
            color: var(--text-color);
            font-family: inherit;
            transition: all 0.2s;
        }
        
        input[type="text"]:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(108, 99, 255, 0.2);
        }
        
        .grocery-list {
            list-style: none;
            padding: 0;
            display: flex;
            flex-direction: column;
            gap: var(--space-sm);
        }
        
        .grocery-item {
            background: var(--card-color);
            padding: var(--space-md);
            border-radius: var(--radius-md);
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: var(--shadow-sm);
            border-left: 4px solid var(--primary);
            transition: all 0.3s;
        }
        
        .grocery-item:hover {
            transform: translateX(-5px);
            box-shadow: var(--shadow-md);
        }
        
        .item-details {
            display: flex;
            flex-direction: column;
            gap: var(--space-xs);
        }
        
        .item-name {
            font-weight: 500;
        }
        
        .item-quantity {
            font-size: var(--text-sm);
            color: var(--text-secondary);
        }
        
        .item-price {
            font-weight: 700;
            color: var(--primary);
        }
        
        .item-date {
            font-size: var(--text-xs);
            color: var(--text-secondary);
        }
        
        .item-actions {
            display: flex;
            gap: var(--space-xs);
        }
        
        .total-card {
            background: linear-gradient(135deg, var(--primary) 0%, var(--primary-light) 100%);
            color: white;
            padding: var(--space-lg);
            border-radius: var(--radius-lg);
            margin-top: var(--space-xl);
            text-align: center;
            box-shadow: var(--shadow-primary);
        }
        
        .total-amount {
            font-size: var(--text-4xl);
            font-weight: 700;
            margin: var(--space-sm) 0;
        }
        
        .notes-section {
            background: var(--card-color);
            border-radius: var(--radius-md);
            padding: var(--space-md);
            box-shadow: var(--shadow-sm);
        }
        
        .notes-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: var(--space-md);
        }
        
        .notes-list {
            max-height: 300px;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            gap: var(--space-sm);
        }
        
        .note-item {
            padding: var(--space-sm);
            border-radius: var(--radius-sm);
            display: flex;
            justify-content: space-between;
            align-items: center;
            background-color: var(--hover-color);
        }
        
        .note-text {
            flex: 1;
            word-break: break-word;
        }
        
        .month-selector {
            background: var(--card-color);
            border-radius: var(--radius-md);
            padding: var(--space-md);
            box-shadow: var(--shadow-sm);
        }
        
        select {
            width: 100%;
            padding: var(--space-sm);
            border-radius: var(--radius-sm);
            border: 1px solid var(--border-color);
            background-color: var(--card-color);
            color: var(--text-color);
            font-family: inherit;
        }
        
        .voice-history {
            background: var(--card-color);
            border-radius: var(--radius-md);
            padding: var(--space-md);
            box-shadow: var(--shadow-sm);
        }
        
        .history-actions {
            display: flex;
            justify-content: flex-end;
            margin-bottom: var(--space-sm);
        }
        
        .history-list {
            max-height: 300px;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            gap: var(--space-sm);
        }
        
        .history-item {
            padding: var(--space-sm);
            border-radius: var(--radius-sm);
            background-color: var(--hover-color);
            display: flex;
            align-items: center;
            gap: var(--space-sm);
        }
        
        .history-content {
            flex: 1;
        }
        
        .history-text {
            margin-top: var(--space-xs);
        }
        
        .empty-state {
            text-align: center;
            padding: var(--space-lg);
            color: var(--text-secondary);
        }
        
        body.dark-mode {
            --bg-color: var(--dark-bg);
            --card-color: var(--dark-card);
            --text-color: var(--dark-text);
            --text-secondary: var(--dark-text-secondary);
            --border-color: var(--dark-border);
            --hover-color: var(--dark-hover);
        }
        
        [lang="en"] {
            font-family: 'Poppins', sans-serif;
            direction: ltr;
        }
        
        [lang="en"] .grocery-item {
            border-left: none;
            border-right: 4px solid var(--primary);
        }
        
        [lang="en"] .grocery-item:hover {
            transform: translateX(5px);
        }
        
        @media (max-width: 1024px) {
            .app-container {
                flex-direction: column;
            }
            
            .sidebar {
                width: 100%;
                border-left: none;
                border-top: 1px solid var(--border-color);
            }
            
            .main-content {
                padding: var(--space-lg);
            }
        }
        
        @media (max-width: 480px) {
            .app-header {
                flex-direction: column;
                align-items: flex-start;
            }
            
            .header-actions {
                width: 100%;
                justify-content: space-between;
            }
            
            .input-group {
                flex-direction: column;
            }
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .fade-in {
            animation: fadeIn 0.3s ease forwards;
        }
    </style>
</head>
<body>
    <div class="app-container">
        <main class="main-content" id="mainContent">
            <div class="app-header">
                <h1 id="appTitle">متتبع البقالة بالذكاء الاصطناعي</h1>
                <div class="header-actions">
                    <button id="themeToggle" class="btn btn-outline">
                        <i class="fas fa-moon"></i> <span id="themeText">وضع الليل</span>
                    </button>
                    <button id="languageToggle" class="btn btn-outline">
                        <i class="fas fa-language"></i> <span id="languageText">English</span>
                    </button>
                </div>
            </div>

            <div class="voice-section">
                <button id="micButton" class="voice-btn">
                    <i class="fas fa-microphone"></i> <span id="voiceButtonText">تحدث لإضافة عنصر</span>
                </button>
                <p id="voiceStatus" class="voice-status">اضغط على الزر وتحدث بوضوح</p>
            </div>

            <div class="input-section">
                <div class="input-group">
                    <input type="text" id="manualInput" placeholder="مثال: 2 كيلو طماطم بـ 3.5 يورو">
                    <button id="addButton" class="btn btn-primary">إضافة</button>
                </div>
            </div>

            <div class="grocery-section">
                <h2 id="groceryTitle">قائمة المشتريات</h2>
                <ul class="grocery-list" id="groceryList"></ul>
            </div>

            <div class="total-card">
                <div id="totalText">إجمالي المشتريات</div>
                <div class="total-amount"><span id="totalAmount">0.00</span> <span id="currency">يورو</span></div>
                <div id="monthText">لهذا الشهر</div>
            </div>
        </main>

        <aside class="sidebar">
            <div class="notes-section">
                <div class="notes-header">
                    <h3 id="notesTitle">الملاحظات</h3>
                    <button id="addNoteBtn" class="btn btn-primary btn-icon"><i class="fas fa-plus"></i></button>
                </div>
                <div class="notes-list" id="notesList"></div>
            </div>

            <div class="month-selector">
                <h3 id="monthTitle">عرض حسب الشهر</h3>
                <select id="monthSelect"></select>
            </div>

            <div class="voice-history">
                <div class="history-actions">
                    <button id="clearHistoryBtn" class="btn btn-sm btn-outline">
                        <i class="fas fa-trash"></i> <span id="clearHistoryText">مسح الكل</span>
                    </button>
                </div>
                <h3 id="historyTitle">سجل الأصوات</h3>
                <div class="history-list" id="voiceHistory"></div>
            </div>
        </aside>
    </div>

    <script>
        // ====== APP STATE ======
        let groceries = JSON.parse(localStorage.getItem('groceries')) || [];
        let notes = JSON.parse(localStorage.getItem('notes')) || [];
        let voiceHistory = JSON.parse(localStorage.getItem('voiceHistory')) || [];
        let isDarkMode = localStorage.getItem('darkMode') === 'true';
        let currentLanguage = localStorage.getItem('language') || 'ar';
        let currentMonthFilter = 'current';
        let lastUpdateMonth = localStorage.getItem('lastUpdateMonth') || getCurrentMonthYear();

        // ====== DOM ELEMENTS ======
        const elements = {
            appTitle: document.getElementById('appTitle'),
            themeToggle: document.getElementById('themeToggle'),
            themeText: document.getElementById('themeText'),
            languageToggle: document.getElementById('languageToggle'),
            languageText: document.getElementById('languageText'),
            micButton: document.getElementById('micButton'),
            voiceButtonText: document.getElementById('voiceButtonText'),
            voiceStatus: document.getElementById('voiceStatus'),
            manualInput: document.getElementById('manualInput'),
            addButton: document.getElementById('addButton'),
            groceryTitle: document.getElementById('groceryTitle'),
            groceryList: document.getElementById('groceryList'),
            totalText: document.getElementById('totalText'),
            totalAmount: document.getElementById('totalAmount'),
            monthText: document.getElementById('monthText'),
            currency: document.getElementById('currency'),
            notesTitle: document.getElementById('notesTitle'),
            notesList: document.getElementById('notesList'),
            addNoteBtn: document.getElementById('addNoteBtn'),
            monthTitle: document.getElementById('monthTitle'),
            monthSelect: document.getElementById('monthSelect'),
            historyTitle: document.getElementById('historyTitle'),
            voiceHistory: document.getElementById('voiceHistory'),
            clearHistoryBtn: document.getElementById('clearHistoryBtn'),
            clearHistoryText: document.getElementById('clearHistoryText')
        };

        // ====== UTILITY FUNCTIONS ======
        function getCurrentMonthYear() {
            const now = new Date();
            return `${now.getFullYear()}-${now.getMonth()}`;
        }

        // ====== INITIALIZATION ======
        function initApp() {
            setTheme(isDarkMode);
            setLanguage(currentLanguage);
            initVoiceRecognition();
            
            updateGroceryList();
            updateNotesList();
            updateVoiceHistory();
            populateMonthSelector();
            
            initMonthChecker();
            setupEventListeners();
        }

        // ====== THEME MANAGEMENT ======
        function setTheme(darkMode) {
            isDarkMode = darkMode;
            localStorage.setItem('darkMode', darkMode);
            
            if (darkMode) {
                document.body.classList.add('dark-mode');
                elements.themeText.textContent = currentLanguage === 'ar' ? 'وضع النهار' : 'Light Mode';
            } else {
                document.body.classList.remove('dark-mode');
                elements.themeText.textContent = currentLanguage === 'ar' ? 'وضع الليل' : 'Dark Mode';
            }
            elements.themeToggle.innerHTML = `<i class="fas ${darkMode ? 'fa-sun' : 'fa-moon'}"></i> ${elements.themeText.textContent}`;
        }

        // ====== LANGUAGE MANAGEMENT ======
        function setLanguage(lang) {
            currentLanguage = lang;
            localStorage.setItem('language', lang);
            document.documentElement.lang = lang;
            document.documentElement.dir = lang === 'ar' ? 'rtl' : 'ltr';
            
            // Update all text elements
            const translations = {
                ar: {
                    appTitle: 'متتبع البقالة بالذكاء الاصطناعي',
                    voiceButtonText: 'تحدث لإضافة عنصر',
                    voiceStatus: 'اضغط على الزر وتحدث بوضوح',
                    manualInputPlaceholder: 'مثال: 2 كيلو طماطم بـ 3.5 يورو',
                    addButton: 'إضافة',
                    groceryTitle: 'قائمة المشتريات',
                    totalText: 'إجمالي المشتريات',
                    monthText: 'لهذا الشهر',
                    currency: 'يورو',
                    notesTitle: 'الملاحظات',
                    monthTitle: 'عرض حسب الشهر',
                    historyTitle: 'سجل الأصوات',
                    languageText: 'English',
                    themeText: isDarkMode ? 'وضع النهار' : 'وضع الليل',
                    clearHistoryText: 'مسح الكل'
                },
                en: {
                    appTitle: 'AI Grocery Tracker',
                    voiceButtonText: 'Speak to add item',
                    voiceStatus: 'Press the button and speak clearly',
                    manualInputPlaceholder: 'Example: 2kg tomatoes for 3.5 euros',
                    addButton: 'Add',
                    groceryTitle: 'Grocery List',
                    totalText: 'Total Spending',
                    monthText: 'This Month',
                    currency: 'EUR',
                    notesTitle: 'Notes',
                    monthTitle: 'View by Month',
                    historyTitle: 'Voice History',
                    languageText: 'العربية',
                    themeText: isDarkMode ? 'Light Mode' : 'Dark Mode',
                    clearHistoryText: 'Clear All'
                }
            };
            
            const t = translations[lang];
            elements.appTitle.textContent = t.appTitle;
            elements.voiceButtonText.textContent = t.voiceButtonText;
            elements.voiceStatus.textContent = t.voiceStatus;
            elements.manualInput.placeholder = t.manualInputPlaceholder;
            elements.addButton.textContent = t.addButton;
            elements.groceryTitle.textContent = t.groceryTitle;
            elements.totalText.textContent = t.totalText;
            elements.monthText.textContent = t.monthText;
            elements.currency.textContent = t.currency;
            elements.notesTitle.textContent = t.notesTitle;
            elements.monthTitle.textContent = t.monthTitle;
            elements.historyTitle.textContent = t.historyTitle;
            elements.languageText.textContent = t.languageText;
            elements.themeText.textContent = t.themeText;
            elements.clearHistoryText.textContent = t.clearHistoryText;
            
            elements.themeToggle.innerHTML = `<i class="fas ${isDarkMode ? 'fa-sun' : 'fa-moon'}"></i> ${t.themeText}`;
            
            updateGroceryList();
            updateNotesList();
            updateVoiceHistory();
            populateMonthSelector();
        }

        // ====== VOICE RECOGNITION ======
        function initVoiceRecognition() {
            const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
            
            if (!SpeechRecognition) {
                elements.micButton.style.display = 'none';
                elements.voiceStatus.textContent = currentLanguage === 'ar' ? 
                    'التعرف الصوتي غير مدعوم في هذا المتصفح' : 
                    'Voice recognition not supported in this browser';
                return null;
            }
            
            const recognition = new SpeechRecognition();
            recognition.lang = currentLanguage === 'ar' ? 'ar-SA' : 'en-US';
            recognition.interimResults = false;
            recognition.maxAlternatives = 3;
            
            recognition.onstart = () => {
                elements.micButton.classList.add('listening');
                elements.voiceStatus.textContent = currentLanguage === 'ar' ? 
                    'يستمع الآن... تحدث' : 
                    'Listening... Speak now';
            };
            
            recognition.onend = () => {
                elements.micButton.classList.remove('listening');
                elements.voiceStatus.textContent = currentLanguage === 'ar' ? 
                    'اضغط على الزر وتحدث بوضوح' : 
                    'Press the button and speak clearly';
            };
            
            recognition.onresult = (event) => {
                const results = event.results[0];
                const bestMatch = results[0].transcript;
                const confidence = results[0].confidence;
                
                voiceHistory.unshift({
                    text: bestMatch,
                    language: currentLanguage,
                    timestamp: new Date().toISOString(),
                    confidence: confidence
                });
                
                if (voiceHistory.length > 50) voiceHistory.pop();
                localStorage.setItem('voiceHistory', JSON.stringify(voiceHistory));
                updateVoiceHistory();
                
                processVoiceCommand(bestMatch);
            };
            
            recognition.onerror = (event) => {
                console.error('Voice recognition error:', event.error);
                elements.voiceStatus.textContent = currentLanguage === 'ar' ? 
                    'خطأ في التعرف الصوتي. حاول مرة أخرى' : 
                    'Voice recognition error. Try again';
            };
            
            return recognition;
        }

        const recognition = initVoiceRecognition();

        function processVoiceCommand(text) {
            elements.manualInput.value = text;
            
            let itemName, quantity = '1', price = 0;
            
            if (currentLanguage === 'ar') {
                const priceMatch = text.match(/(\d+[,.]?\d*)\s*(يورو|ريال|دولار|جنيها?|ليرة?)/);
                price = priceMatch ? parseFloat(priceMatch[1].replace(',', '.')) : 0;
                
                const quantityMatch = text.match(/(\d+[,.]?\d*)\s*(كيلو|كجم|جرام|لتر|علبة|حبة|قطعة|كيس)/);
                if (quantityMatch) {
                    quantity = parseFloat(quantityMatch[1].replace(',', '.'));
                    const unit = quantityMatch[2];
                    
                    if (unit === 'كيلو' || unit === 'كجم') {
                        quantity = quantity + ' كجم';
                    } else if (unit === 'جرام') {
                        quantity = quantity + ' جم';
                    } else {
                        quantity = quantity + ' ' + unit;
                    }
                }
                
                itemName = text
                    .replace(/(\d+[,.]?\d*)\s*(يورو|ريال|دولار|جنيها?|ليرة?)/, '')
                    .replace(/(\d+[,.]?\d*)\s*(كيلو|كجم|جرام|لتر|علبة|حبة|قطعة|كيس)/, '')
                    .trim();
            } else {
                const priceMatch = text.match(/(\d+[,.]?\d*)\s*(euros?|dollars?|pounds?|USD|EUR)/);
                price = priceMatch ? parseFloat(priceMatch[1].replace(',', '.')) : 0;
                
                const quantityMatch = text.match(/(\d+[,.]?\d*)\s*(kg|kilo|kilos|grams?|liters?|bottles?|pieces?|bags?)/);
                if (quantityMatch) {
                    quantity = parseFloat(quantityMatch[1].replace(',', '.'));
                    const unit = quantityMatch[2];
                    
                    if (unit === 'kg' || unit === 'kilo' || unit === 'kilos') {
                        quantity = quantity + ' kg';
                    } else if (unit === 'grams' || unit === 'gram') {
                        quantity = quantity + ' g';
                    } else {
                        quantity = quantity + ' ' + unit;
                    }
                }
                
                itemName = text
                    .replace(/(\d+[,.]?\d*)\s*(euros?|dollars?|pounds?|USD|EUR)/, '')
                    .replace(/(\d+[,.]?\d*)\s*(kg|kilo|kilos|grams?|liters?|bottles?|pieces?|bags?)/, '')
                    .trim();
            }
            
            if (itemName === '') {
                itemName = currentLanguage === 'ar' ? 'سلعة غير معروفة' : 'Unknown item';
            }
            
            addGroceryItem(itemName, quantity, price);
        }

        // ====== GROCERY LIST FUNCTIONS ======
        function addGroceryItem(name, quantity, price) {
            const newItem = {
                id: Date.now(),
                name: name,
                quantity: quantity,
                price: price,
                date: new Date().toISOString(),
                language: currentLanguage
            };
            
            groceries.unshift(newItem);
            saveGroceries();
            updateGroceryList();
            elements.manualInput.value = '';
            
            const btn = elements.addButton;
            btn.innerHTML = currentLanguage === 'ar' ? 
                '<i class="fas fa-check"></i> تمت الإضافة' : 
                '<i class="fas fa-check"></i> Added';
            btn.classList.add('btn-secondary');
            setTimeout(() => {
                btn.innerHTML = currentLanguage === 'ar' ? 'إضافة' : 'Add';
                btn.classList.remove('btn-secondary');
                btn.classList.add('btn-primary');
            }, 1500);
        }

        function saveGroceries() {
            localStorage.setItem('groceries', JSON.stringify(groceries));
            updateTotal();
            populateMonthSelector();
        }

        function updateGroceryList() {
            elements.groceryList.innerHTML = '';
            
            let filteredItems = currentMonthFilter === 'current' ? 
                groceries.filter(item => {
                    const itemDate = new Date(item.date);
                    return `${itemDate.getFullYear()}-${itemDate.getMonth()}` === getCurrentMonthYear();
                }) : 
                groceries.filter(item => {
                    const itemDate = new Date(item.date);
                    return `${itemDate.getFullYear()}-${itemDate.getMonth()}` === currentMonthFilter;
                });
            
            if (filteredItems.length === 0) {
                const emptyMsg = currentLanguage === 'ar' ? 
                    'لا توجد عناصر في القائمة لهذا الشهر' : 
                    'No items in the list for this month';
                const emptyEl = document.createElement('li');
                emptyEl.className = 'empty-state';
                emptyEl.textContent = emptyMsg;
                elements.groceryList.appendChild(emptyEl);
                return;
            }
            
            filteredItems.forEach(item => {
                const li = document.createElement('li');
                li.className = 'grocery-item fade-in';
                
                const itemDate = new Date(item.date);
                const dateStr = itemDate.toLocaleDateString(
                    currentLanguage === 'ar' ? 'ar-EG' : 'en-US',
                    { day: 'numeric', month: 'short', hour: '2-digit', minute: '2-digit' }
                );
                
                li.innerHTML = `
                    <div class="item-details">
                        <div class="item-name">${item.name}</div>
                        <div class="item-quantity">${item.quantity}</div>
                        <div class="item-price">${item.price.toFixed(2)} ${currentLanguage === 'ar' ? 'يورو' : 'EUR'}</div>
                        <div class="item-date">${dateStr}</div>
                    </div>
                    <div class="item-actions">
                        <button class="btn btn-outline btn-sm btn-icon" onclick="editGroceryItem(${item.id})">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn btn-secondary btn-sm btn-icon" onclick="deleteGroceryItem(${item.id})">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                `;
                elements.groceryList.appendChild(li);
            });
            
            updateTotal();
        }

        function updateTotal() {
            let total = 0;
            const filteredItems = currentMonthFilter === 'current' ? 
                groceries.filter(item => {
                    const itemDate = new Date(item.date);
                    return `${itemDate.getFullYear()}-${itemDate.getMonth()}` === getCurrentMonthYear();
                }) : 
                groceries.filter(item => {
                    const itemDate = new Date(item.date);
                    return `${itemDate.getFullYear()}-${itemDate.getMonth()}` === currentMonthFilter;
                });
            
            total = filteredItems.reduce((sum, item) => sum + item.price, 0);
            elements.totalAmount.textContent = total.toFixed(2);
        }

        function deleteGroceryItem(id) {
            const confirmMsg = currentLanguage === 'ar' ? 
                'هل أنت متأكد من حذف هذا العنصر؟' : 
                'Are you sure you want to delete this item?';
            
            if (confirm(confirmMsg)) {
                groceries = groceries.filter(item => item.id !== id);
                saveGroceries();
                updateGroceryList();
            }
        }

        function editGroceryItem(id) {
            const item = groceries.find(item => item.id === id);
            if (!item) return;
            
            const newName = prompt(currentLanguage === 'ar' ? 'اسم جديد:' : 'New name:', item.name);
            if (newName === null) return;
            
            const newQuantity = prompt(currentLanguage === 'ar' ? 'الكمية الجديدة:' : 'New quantity:', item.quantity);
            if (newQuantity === null) return;
            
            const newPrice = parseFloat(prompt(currentLanguage === 'ar' ? 'السعر الجديد:' : 'New price:', item.price));
            if (isNaN(newPrice)) return;
            
            item.name = newName;
            item.quantity = newQuantity;
            item.price = newPrice;
            saveGroceries();
            updateGroceryList();
        }

        // ====== NOTES FUNCTIONS ======
        function addNote(text = '') {
            if (text === '') {
                text = prompt(currentLanguage === 'ar' ? 'أدخل ملاحظة جديدة:' : 'Enter a new note:');
                if (!text) return;
            }
            
            notes.unshift({
                id: Date.now(),
                text: text,
                date: new Date().toISOString(),
                language: currentLanguage
            });
            
            if (notes.length > 100) notes.pop();
            saveNotes();
            updateNotesList();
        }

        function saveNotes() {
            localStorage.setItem('notes', JSON.stringify(notes));
        }

        function updateNotesList() {
            elements.notesList.innerHTML = '';
            
            if (notes.length === 0) {
                const emptyMsg = currentLanguage === 'ar' ? 
                    'لا توجد ملاحظات' : 
                    'No notes yet';
                const emptyEl = document.createElement('div');
                emptyEl.className = 'empty-state';
                emptyEl.textContent = emptyMsg;
                elements.notesList.appendChild(emptyEl);
                return;
            }
            
            notes.slice(0, 20).forEach(note => {
                const noteEl = document.createElement('div');
                noteEl.className = 'note-item fade-in';
                
                const noteDate = new Date(note.date);
                const dateStr = noteDate.toLocaleDateString(
                    currentLanguage === 'ar' ? 'ar-EG' : 'en-US',
                    { day: 'numeric', month: 'short', hour: '2-digit', minute: '2-digit' }
                );
                
                noteEl.innerHTML = `
                    <div class="note-text">${note.text}</div>
                    <small>${dateStr}</small>
                    <button class="btn btn-secondary btn-sm btn-icon" onclick="deleteNote(${note.id})">
                        <i class="fas fa-trash"></i>
                    </button>
                `;
                elements.notesList.appendChild(noteEl);
            });
        }

        function deleteNote(id) {
            notes = notes.filter(note => note.id !== id);
            saveNotes();
            updateNotesList();
        }

        // ====== VOICE HISTORY FUNCTIONS ======
        function updateVoiceHistory() {
            elements.voiceHistory.innerHTML = '';
            
            const filteredHistory = currentMonthFilter === 'current' ? 
                voiceHistory.filter(item => {
                    const itemDate = new Date(item.timestamp);
                    return `${itemDate.getFullYear()}-${itemDate.getMonth()}` === getCurrentMonthYear();
                }) : 
                voiceHistory.filter(item => {
                    const itemDate = new Date(item.timestamp);
                    return `${itemDate.getFullYear()}-${itemDate.getMonth()}` === currentMonthFilter;
                });
            
            if (filteredHistory.length === 0) {
                const emptyMsg = currentLanguage === 'ar' ? 
                    'لا توجد تسجيلات لهذا الشهر' : 
                    'No recordings for this month';
                const emptyEl = document.createElement('div');
                emptyEl.className = 'empty-state';
                emptyEl.textContent = emptyMsg;
                elements.voiceHistory.appendChild(emptyEl);
                return;
            }
            
            filteredHistory.forEach(recording => {
                const recEl = document.createElement('div');
                recEl.className = 'history-item fade-in';
                
                const recDate = new Date(recording.timestamp);
                const dateStr = recDate.toLocaleDateString(
                    currentLanguage === 'ar' ? 'ar-EG' : 'en-US',
                    { day: 'numeric', month: 'short', hour: '2-digit', minute: '2-digit' }
                );
                
                recEl.innerHTML = `
                    <div class="history-content">
                        <small>${dateStr} (${Math.round(recording.confidence * 100)}%)</small>
                        <div class="history-text">${recording.text}</div>
                    </div>
                    <button class="btn btn-danger btn-sm btn-icon" onclick="deleteHistoryItem('${recording.timestamp}')">
                        <i class="fas fa-trash"></i>
                    </button>
                `;
                elements.voiceHistory.appendChild(recEl);
            });
        }

        function deleteHistoryItem(timestamp) {
            voiceHistory = voiceHistory.filter(item => item.timestamp !== timestamp);
            localStorage.setItem('voiceHistory', JSON.stringify(voiceHistory));
            updateVoiceHistory();
        }

        function clearAllHistory() {
            const confirmMsg = currentLanguage === 'ar' ? 
                'هل أنت متأكد من حذف كل السجل الصوتي لهذا الشهر؟' : 
                'Are you sure you want to clear all voice history for this month?';
            
            if (confirm(confirmMsg)) {
                const currentMonthYear = currentMonthFilter === 'current' ? getCurrentMonthYear() : currentMonthFilter;
                voiceHistory = voiceHistory.filter(item => {
                    const itemDate = new Date(item.timestamp);
                    return `${itemDate.getFullYear()}-${itemDate.getMonth()}` !== currentMonthYear;
                });
                localStorage.setItem('voiceHistory', JSON.stringify(voiceHistory));
                updateVoiceHistory();
            }
        }

        // ====== MONTH SELECTOR FUNCTIONS ======
        function populateMonthSelector() {
            elements.monthSelect.innerHTML = '';
            
            // Add current month option
            const currentOption = document.createElement('option');
            currentOption.value = 'current';
            currentOption.textContent = currentLanguage === 'ar' ? 'الشهر الحالي' : 'Current Month';
            currentOption.selected = currentMonthFilter === 'current';
            elements.monthSelect.appendChild(currentOption);
            
            // Get unique months from data
            const monthsMap = {};
            const allItems = [...groceries, ...voiceHistory];
            
            allItems.forEach(item => {
                const date = new Date(item.date || item.timestamp);
                const monthYear = `${date.getFullYear()}-${date.getMonth()}`;
                monthsMap[monthYear] = true;
            });
            
            // Add month options
            Object.keys(monthsMap).sort((a, b) => b.localeCompare(a)).forEach(monthYear => {
                const [year, month] = monthYear.split('-');
                const monthName = new Date(year, month).toLocaleDateString(
                    currentLanguage === 'ar' ? 'ar-EG' : 'en-US', 
                    { month: 'long', year: 'numeric' }
                );
                
                const option = document.createElement('option');
                option.value = monthYear;
                option.textContent = monthName;
                option.selected = currentMonthFilter === monthYear;
                elements.monthSelect.appendChild(option);
            });
        }

        function filterByMonth(monthYear) {
            currentMonthFilter = monthYear;
            updateGroceryList();
            updateVoiceHistory();
        }

        // ====== MONTH CHECKER ======
        function checkMonthChange() {
            const currentMonthYear = getCurrentMonthYear();
            
            if (lastUpdateMonth !== currentMonthYear) {
                lastUpdateMonth = currentMonthYear;
                localStorage.setItem('lastUpdateMonth', currentMonthYear);
                
                if (currentMonthFilter === 'current') {
                    updateGroceryList();
                    updateVoiceHistory();
                }
                populateMonthSelector();
            }
        }

        function initMonthChecker() {
            checkMonthChange();
            setInterval(checkMonthChange, 3600000); // Check every hour
        }

        // ====== EVENT LISTENERS ======
        function setupEventListeners() {
            elements.themeToggle.addEventListener('click', () => {
                setTheme(!isDarkMode);
            });
            
            elements.languageToggle.addEventListener('click', () => {
                setLanguage(currentLanguage === 'ar' ? 'en' : 'ar');
                if (recognition) {
                    recognition.lang = currentLanguage === 'ar' ? 'ar-SA' : 'en-US';
                }
            });
            
            if (recognition) {
                elements.micButton.addEventListener('click', () => {
                    recognition.lang = currentLanguage === 'ar' ? 'ar-SA' : 'en-US';
                    recognition.start();
                });
            }
            
            elements.addButton.addEventListener('click', () => {
                if (elements.manualInput.value.trim() !== '') {
                    processVoiceCommand(elements.manualInput.value);
                }
            });
            
            elements.manualInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter' && elements.manualInput.value.trim() !== '') {
                    processVoiceCommand(elements.manualInput.value);
                }
            });
            
            elements.addNoteBtn.addEventListener('click', () => {
                addNote();
            });
            
            elements.monthSelect.addEventListener('change', (e) => {
                filterByMonth(e.target.value);
            });
            
            elements.clearHistoryBtn.addEventListener('click', clearAllHistory);
        }

        // ====== GLOBAL FUNCTIONS ======
        window.deleteGroceryItem = deleteGroceryItem;
        window.editGroceryItem = editGroceryItem;
        window.deleteNote = deleteNote;
        window.deleteHistoryItem = deleteHistoryItem;
        
        // ====== INITIALIZE APP ======
        document.addEventListener('DOMContentLoaded', initApp);
    </script>
</body>
</html>
